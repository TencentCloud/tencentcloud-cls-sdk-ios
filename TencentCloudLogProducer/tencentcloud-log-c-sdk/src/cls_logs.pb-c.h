/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cls_logs.proto */

#ifndef PROTOBUF_C_cls_5flogs_2eproto__INCLUDED
#define PROTOBUF_C_cls_5flogs_2eproto__INCLUDED

//#include <protobuf-c/protobuf-c.h>
#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Cls__Log Cls__Log;
typedef struct _Cls__Log__Content Cls__Log__Content;
typedef struct _Cls__LogTag Cls__LogTag;
typedef struct _Cls__LogGroup Cls__LogGroup;
typedef struct _Cls__LogGroupList Cls__LogGroupList;


/* --- enums --- */


/* --- messages --- */

struct  _Cls__Log__Content
{
  ProtobufCMessage base;
  /*
   * 每组字段的 key
   */
  char *key;
  /*
   * 每组字段的 value
   */
  char *value;
};
#define CLS__LOG__CONTENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cls__log__content__descriptor) \
    , NULL, NULL }


struct  _Cls__Log
{
  ProtobufCMessage base;
  /*
   * 时间戳，UNIX时间格式
   */
  int64_t time;
  /*
   * 一条日志里的多个kv组合
   */
  size_t n_contents;
  Cls__Log__Content **contents;
};
#define CLS__LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cls__log__descriptor) \
    , 0, 0,NULL }


struct  _Cls__LogTag
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CLS__LOG_TAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cls__log_tag__descriptor) \
    , NULL, NULL }


struct  _Cls__LogGroup
{
  ProtobufCMessage base;
  /*
   * 多条日志合成的日志数组
   */
  size_t logs_count;
  Cls__Log **logs;
  /*
   * 目前暂无效用
   */
  char *contextflow;
  /*
   * 日志文件名
   */
  char *filename;
  /*
   * 日志来源，一般使用机器IP
   */
  char *source;
  size_t n_logtags;
  Cls__LogTag **logtags;
};
#define CLS__LOG_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cls__log_group__descriptor) \
    , 0,NULL, NULL, NULL, NULL, 0,NULL }


struct  _Cls__LogGroupList
{
  ProtobufCMessage base;
  /*
   * 日志组列表
   */
  size_t n_loggrouplist;
  Cls__LogGroup **loggrouplist;
};
#define CLS__LOG_GROUP_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cls__log_group_list__descriptor) \
    , 0,NULL }


/* Cls__Log__Content methods */
void   cls__log__content__init
                     (Cls__Log__Content         *message);
/* Cls__Log methods */
void   cls__log__init
                     (Cls__Log         *message);
size_t cls__log__get_packed_size
                     (const Cls__Log   *message);
size_t cls__log__pack
                     (const Cls__Log   *message,
                      uint8_t             *out);
size_t cls__log__pack_to_buffer
                     (const Cls__Log   *message,
                      ProtobufCBuffer     *buffer);
Cls__Log *
       cls__log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cls__log__free_unpacked
                     (Cls__Log *message,
                      ProtobufCAllocator *allocator);
/* Cls__LogTag methods */
void   cls__log_tag__init
                     (Cls__LogTag         *message);
size_t cls__log_tag__get_packed_size
                     (const Cls__LogTag   *message);
size_t cls__log_tag__pack
                     (const Cls__LogTag   *message,
                      uint8_t             *out);
size_t cls__log_tag__pack_to_buffer
                     (const Cls__LogTag   *message,
                      ProtobufCBuffer     *buffer);
Cls__LogTag *
       cls__log_tag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cls__log_tag__free_unpacked
                     (Cls__LogTag *message,
                      ProtobufCAllocator *allocator);
/* Cls__LogGroup methods */
void   cls__log_group__init
                     (Cls__LogGroup         *message);
size_t cls__log_group__get_packed_size
                     (const Cls__LogGroup   *message);
size_t cls__log_group__pack
                     (const Cls__LogGroup   *message,
                      uint8_t             *out);
size_t cls__log_group__pack_to_buffer
                     (const Cls__LogGroup   *message,
                      ProtobufCBuffer     *buffer);
Cls__LogGroup *
       cls__log_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cls__log_group__free_unpacked
                     (Cls__LogGroup *message,
                      ProtobufCAllocator *allocator);
/* Cls__LogGroupList methods */
void   cls__log_group_list__init
                     (Cls__LogGroupList         *message);
size_t cls__log_group_list__get_packed_size
                     (const Cls__LogGroupList   *message);
size_t cls__log_group_list__pack
                     (const Cls__LogGroupList   *message,
                      uint8_t             *out);
size_t cls__log_group_list__pack_to_buffer
                     (const Cls__LogGroupList   *message,
                      ProtobufCBuffer     *buffer);
Cls__LogGroupList *
       cls__log_group_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cls__log_group_list__free_unpacked
                     (Cls__LogGroupList *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cls__Log__Content_Closure)
                 (const Cls__Log__Content *message,
                  void *closure_data);
typedef void (*Cls__Log_Closure)
                 (const Cls__Log *message,
                  void *closure_data);
typedef void (*Cls__LogTag_Closure)
                 (const Cls__LogTag *message,
                  void *closure_data);
typedef void (*Cls__LogGroup_Closure)
                 (const Cls__LogGroup *message,
                  void *closure_data);
typedef void (*Cls__LogGroupList_Closure)
                 (const Cls__LogGroupList *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cls__log__descriptor;
extern const ProtobufCMessageDescriptor cls__log__content__descriptor;
extern const ProtobufCMessageDescriptor cls__log_tag__descriptor;
extern const ProtobufCMessageDescriptor cls__log_group__descriptor;
extern const ProtobufCMessageDescriptor cls__log_group_list__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cls_5flogs_2eproto__INCLUDED */
